package it.upo.reti2s;

import com.google.gson.Gson;
import java.util.*;
import ai.api.GsonFactory;
import ai.api.model.AIResponse;
import ai.api.model.Fulfillment;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import java.io.*;
import static spark.Spark.post;
import java.io.IOException;

public class TaskService {

    //FIELDS
    private static Player player = null;
    private static ListIterator<String> songIterator;
    private static  String defaultBaseURL = "/api/v1.0";

    //source path example for songs
    private static String path = "C:\\Users\\stefa\\Music\\Imagine Dragons - 2018 - Origins (Deluxe Edition)\\";
    //private static ArrayList<String> songList = new ArrayList<String>();

    //field used to set volume
    private static float volume = 0.8f;

    //Init for lights
    // the URL of the Philips Hue bridge
    private static String baseURL = "http://localhost";

    // example username, generated by following https://www.developers.meethue.com/documentation/getting-started
    //String username = "1jlyVie2nvwtNwl0hv8KdZOO0okdvNcIIdPXWsdX";
    //String username = "iI5Cp8sDO0rRhBzDshhAa8JBd20XGduxMnSBkR7W";
    private static String username = "newdeveloper";

    // base URL for lights
    private static String lightsURL = baseURL + "/api/" + username + "/lights/";

    // get the Hue lamps
    private static Map<String, ?> allLights = rest.get(lightsURL);

    //Methods
    public static void main(String[] args) {

        Gson gson = GsonFactory.getDefaultFactory().getGson();

        //Initialize songIterator in the main method to keep a single instance
        songIterator = initSongIterator().listIterator();

        post(defaultBaseURL + "/music", (request, response) -> {
            Fulfillment output = new Fulfillment();
            doWebhook(gson.fromJson(request.body(), AIResponse.class), output);
            response.type("application/json");

            return output;
        }, gson::toJson);

    }

    private static void doWebhook(AIResponse input, Fulfillment output) throws IOException, InterruptedException {

        // 1. Play
        if (input.getResult().getAction().equalsIgnoreCase("playAction")) {

            String nextSong = songIterator.next();
            try {
                player = new Player(new FileInputStream(nextSong));
            } catch (JavaLayerException e) {
                e.printStackTrace();
            }

            try {

                String callURL;
                String body;

                // iterate over the Hue lamps, turn them on with the color loop effect -> to be tested
                for (String light : allLights.keySet()) {
                    callURL = lightsURL + light + "/state";
                    body = "{ \"on\" : true, \"effect\" : \"colorloop\" }";
                    //body = "{ \"on\" : \"true\"}";

                    rest.put(callURL, body, "application/json");
                }

                // Make music play
                player.play();


            } catch (JavaLayerException e) {
                e.printStackTrace();
            }
        }

        // 2. Stop
        else if (input.getResult().getAction().equalsIgnoreCase("stopAction")) {

            player.close();

            String callURL;
            String body;

            for (String light : allLights.keySet()) {
                callURL = lightsURL + light + "/state";
                body = "{ \"on\" : \"false\"}";

                rest.put(callURL, body, "application/json");
            }
        }

        // 3. Next player
        else if (input.getResult().getAction().equalsIgnoreCase("nextAction")) {
            player.close();

            try {
                if (songIterator.hasNext()) {

                    String nextSong = songIterator.next();
                    player = new Player(new FileInputStream(nextSong));
                }
                // Reinizialize and play
                else{
                    songIterator = initSongIterator().listIterator();
                    String nextSong = songIterator.next();
                    player = new Player(new FileInputStream(nextSong));
                    player.play();
                }
            } catch (JavaLayerException e) {
                e.printStackTrace();
            }

            try {

                player.play();
            } catch (JavaLayerException e) {
                e.printStackTrace();
            }
        }

        //4. Previous
        else if (input.getResult().getAction().equalsIgnoreCase("previousAction")) {
            player.close();

            try {
                if (songIterator.hasPrevious()) {

                    String nextSong = songIterator.previous();
                    player = new Player(new FileInputStream(nextSong));
                }
                // Reinizialize and play
                else{
                    songIterator = initSongIterator().listIterator();
                    String nextSong = songIterator.next();
                    player = new Player(new FileInputStream(nextSong));
                    player.play();
                }
            } catch (JavaLayerException e) {
                e.printStackTrace();
            }

            try {

                player.play();
            } catch (JavaLayerException e) {
                e.printStackTrace();
            }

        }

        // 5. Increment audio
        else if (input.getResult().getAction().equalsIgnoreCase("addVolume")) {

            volume += 0.2f;

            AudioControl.getMasterOutputLine();
            AudioControl.setMasterOutputVolume(volume);

        }
        // 6. Decrement audio
        else if (input.getResult().getAction().equalsIgnoreCase("lowVolume")) {

            volume -= 0.2f;

            AudioControl.getMasterOutputLine();
            AudioControl.setMasterOutputVolume(volume);

        }
    }

    private static ArrayList<String> initSongIterator(){

        ArrayList<String> songList = new ArrayList<String>();
        File[] files = new File(path).listFiles();

        for (File file : files) {
            if (file.isFile()) {
                songList.add(path + file.getName());
            }
        }

        return songList ;
    }
}

